{"ast":null,"code":"function getActions(states) {\n  return Object.keys(states).map(key => {\n    const state = states[key];\n    const actions = Object.keys(state.on || {});\n    return state.states ? getActions(state.states).concat(actions) : actions;\n  }).reduce((a, b) => a.concat(b), []).filter((key, pos, arr) => arr.indexOf(key) === pos);\n}\n\nexport function createMiddleware(machine, actionMap) {\n  const validActions = getActions(machine.config.states);\n  return ({\n    dispatch,\n    getState\n  }) => next => action => {\n    if (validActions.includes(action.type)) {\n      const state = getState();\n      const nextState = machine.transition(state.machine.value, action, state);\n      dispatch({\n        type: \"@@machine/UPDATE_STATE\",\n        payload: nextState\n      });\n      nextState.actions.map(key => actionMap[key]).filter(Boolean).forEach(fn => fn(dispatch, state, action));\n    }\n\n    return next(action);\n  };\n}\nexport function createReducer(initialState) {\n  return (state = initialState, {\n    type,\n    payload\n  }) => type === \"@@machine/UPDATE_STATE\" ? payload : state;\n}","map":{"version":3,"sources":["/Users/dmitriilobanov/Documents/projects/airport-demo/src/store/reducers/helpers.js"],"names":["getActions","states","Object","keys","map","key","state","actions","on","concat","reduce","a","b","filter","pos","arr","indexOf","createMiddleware","machine","actionMap","validActions","config","dispatch","getState","next","action","includes","type","nextState","transition","value","payload","Boolean","forEach","fn","createReducer","initialState"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACxB,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EACJG,GADI,CACAC,GAAG,IAAI;AACV,UAAMC,KAAK,GAAGL,MAAM,CAACI,GAAD,CAApB;AACA,UAAME,OAAO,GAAGL,MAAM,CAACC,IAAP,CAAYG,KAAK,CAACE,EAAN,IAAY,EAAxB,CAAhB;AAEA,WAAOF,KAAK,CAACL,MAAN,GAAeD,UAAU,CAACM,KAAK,CAACL,MAAP,CAAV,CAAyBQ,MAAzB,CAAgCF,OAAhC,CAAf,GAA0DA,OAAjE;AACD,GANI,EAOJG,MAPI,CAOG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,MAAF,CAASG,CAAT,CAPb,EAO0B,EAP1B,EAQJC,MARI,CAQG,CAACR,GAAD,EAAMS,GAAN,EAAWC,GAAX,KAAmBA,GAAG,CAACC,OAAJ,CAAYX,GAAZ,MAAqBS,GAR3C,CAAP;AASD;;AAED,OAAO,SAASG,gBAAT,CAA0BC,OAA1B,EAAmCC,SAAnC,EAA8C;AACnD,QAAMC,YAAY,GAAGpB,UAAU,CAACkB,OAAO,CAACG,MAAR,CAAepB,MAAhB,CAA/B;AAEA,SAAO,CAAC;AAAEqB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA4BC,IAAI,IAAIC,MAAM,IAAI;AACnD,QAAIL,YAAY,CAACM,QAAb,CAAsBD,MAAM,CAACE,IAA7B,CAAJ,EAAwC;AACtC,YAAMrB,KAAK,GAAGiB,QAAQ,EAAtB;AACA,YAAMK,SAAS,GAAGV,OAAO,CAACW,UAAR,CAAmBvB,KAAK,CAACY,OAAN,CAAcY,KAAjC,EAAwCL,MAAxC,EAAgDnB,KAAhD,CAAlB;AAEAgB,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAE,wBADC;AAEPI,QAAAA,OAAO,EAAEH;AAFF,OAAD,CAAR;AAKAA,MAAAA,SAAS,CAACrB,OAAV,CACGH,GADH,CACOC,GAAG,IAAIc,SAAS,CAACd,GAAD,CADvB,EAEGQ,MAFH,CAEUmB,OAFV,EAGGC,OAHH,CAGWC,EAAE,IAAIA,EAAE,CAACZ,QAAD,EAAWhB,KAAX,EAAkBmB,MAAlB,CAHnB;AAID;;AAED,WAAOD,IAAI,CAACC,MAAD,CAAX;AACD,GAjBD;AAkBD;AAED,OAAO,SAASU,aAAT,CAAuBC,YAAvB,EAAqC;AAC1C,SAAO,CAAC9B,KAAK,GAAG8B,YAAT,EAAuB;AAAET,IAAAA,IAAF;AAAQI,IAAAA;AAAR,GAAvB,KACLJ,IAAI,KAAK,wBAAT,GAAoCI,OAApC,GAA8CzB,KADhD;AAED","sourcesContent":["function getActions(states) {\n    return Object.keys(states)\n      .map(key => {\n        const state = states[key]\n        const actions = Object.keys(state.on || {})\n  \n        return state.states ? getActions(state.states).concat(actions) : actions\n      })\n      .reduce((a, b) => a.concat(b), [])\n      .filter((key, pos, arr) => arr.indexOf(key) === pos)\n  }\n  \n  export function createMiddleware(machine, actionMap) {\n    const validActions = getActions(machine.config.states)\n  \n    return ({ dispatch, getState }) => next => action => {\n      if (validActions.includes(action.type)) {\n        const state = getState()\n        const nextState = machine.transition(state.machine.value, action, state)\n  \n        dispatch({\n          type: \"@@machine/UPDATE_STATE\",\n          payload: nextState\n        })\n  \n        nextState.actions\n          .map(key => actionMap[key])\n          .filter(Boolean)\n          .forEach(fn => fn(dispatch, state, action))\n      }\n  \n      return next(action)\n    }\n  }\n  \n  export function createReducer(initialState) {\n    return (state = initialState, { type, payload }) =>\n      type === \"@@machine/UPDATE_STATE\" ? payload : state\n  }"]},"metadata":{},"sourceType":"module"}